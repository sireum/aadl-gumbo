/**
 * Copyright (c) 2021, Kansas State University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.sireum.aadl.gumbo.gumbo.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.sireum.aadl.gumbo.gumbo.util.GumboAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GumboItemProviderAdapterFactory extends GumboAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GumboItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.GumboLibrary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GumboLibraryItemProvider gumboLibraryItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.GumboLibrary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGumboLibraryAdapter()
  {
    if (gumboLibraryItemProvider == null)
    {
      gumboLibraryItemProvider = new GumboLibraryItemProvider(this);
    }

    return gumboLibraryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.GumboSubclause} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GumboSubclauseItemProvider gumboSubclauseItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.GumboSubclause}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGumboSubclauseAdapter()
  {
    if (gumboSubclauseItemProvider == null)
    {
      gumboSubclauseItemProvider = new GumboSubclauseItemProvider(this);
    }

    return gumboSubclauseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.SpecSection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecSectionItemProvider specSectionItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.SpecSection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSpecSectionAdapter()
  {
    if (specSectionItemProvider == null)
    {
      specSectionItemProvider = new SpecSectionItemProvider(this);
    }

    return specSectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.ComputationalModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComputationalModelItemProvider computationalModelItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.ComputationalModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComputationalModelAdapter()
  {
    if (computationalModelItemProvider == null)
    {
      computationalModelItemProvider = new ComputationalModelItemProvider(this);
    }

    return computationalModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.Flows} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlowsItemProvider flowsItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.Flows}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFlowsAdapter()
  {
    if (flowsItemProvider == null)
    {
      flowsItemProvider = new FlowsItemProvider(this);
    }

    return flowsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.Flow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlowItemProvider flowItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.Flow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFlowAdapter()
  {
    if (flowItemProvider == null)
    {
      flowItemProvider = new FlowItemProvider(this);
    }

    return flowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.Contract} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractItemProvider contractItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.Contract}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContractAdapter()
  {
    if (contractItemProvider == null)
    {
      contractItemProvider = new ContractItemProvider(this);
    }

    return contractItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.SpecStatement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecStatementItemProvider specStatementItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.SpecStatement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSpecStatementAdapter()
  {
    if (specStatementItemProvider == null)
    {
      specStatementItemProvider = new SpecStatementItemProvider(this);
    }

    return specStatementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.Expr} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprItemProvider exprItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.Expr}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExprAdapter()
  {
    if (exprItemProvider == null)
    {
      exprItemProvider = new ExprItemProvider(this);
    }

    return exprItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.SubcomponentElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubcomponentElementItemProvider subcomponentElementItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.SubcomponentElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSubcomponentElementAdapter()
  {
    if (subcomponentElementItemProvider == null)
    {
      subcomponentElementItemProvider = new SubcomponentElementItemProvider(this);
    }

    return subcomponentElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.FeatureElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureElementItemProvider featureElementItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.FeatureElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFeatureElementAdapter()
  {
    if (featureElementItemProvider == null)
    {
      featureElementItemProvider = new FeatureElementItemProvider(this);
    }

    return featureElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.PeriodicComputationalModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PeriodicComputationalModelItemProvider periodicComputationalModelItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.PeriodicComputationalModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPeriodicComputationalModelAdapter()
  {
    if (periodicComputationalModelItemProvider == null)
    {
      periodicComputationalModelItemProvider = new PeriodicComputationalModelItemProvider(this);
    }

    return periodicComputationalModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.HyperperiodComputationalModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HyperperiodComputationalModelItemProvider hyperperiodComputationalModelItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.HyperperiodComputationalModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHyperperiodComputationalModelAdapter()
  {
    if (hyperperiodComputationalModelItemProvider == null)
    {
      hyperperiodComputationalModelItemProvider = new HyperperiodComputationalModelItemProvider(this);
    }

    return hyperperiodComputationalModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.AssumeStatement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssumeStatementItemProvider assumeStatementItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.AssumeStatement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssumeStatementAdapter()
  {
    if (assumeStatementItemProvider == null)
    {
      assumeStatementItemProvider = new AssumeStatementItemProvider(this);
    }

    return assumeStatementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.GuaranteeStatement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GuaranteeStatementItemProvider guaranteeStatementItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.GuaranteeStatement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGuaranteeStatementAdapter()
  {
    if (guaranteeStatementItemProvider == null)
    {
      guaranteeStatementItemProvider = new GuaranteeStatementItemProvider(this);
    }

    return guaranteeStatementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.BinaryExpr} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BinaryExprItemProvider binaryExprItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.BinaryExpr}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBinaryExprAdapter()
  {
    if (binaryExprItemProvider == null)
    {
      binaryExprItemProvider = new BinaryExprItemProvider(this);
    }

    return binaryExprItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.UnaryExpr} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnaryExprItemProvider unaryExprItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.UnaryExpr}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUnaryExprAdapter()
  {
    if (unaryExprItemProvider == null)
    {
      unaryExprItemProvider = new UnaryExprItemProvider(this);
    }

    return unaryExprItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.gumbo.gumbo.IdExpr} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IdExprItemProvider idExprItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.gumbo.gumbo.IdExpr}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIdExprAdapter()
  {
    if (idExprItemProvider == null)
    {
      idExprItemProvider = new IdExprItemProvider(this);
    }

    return idExprItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose()
  {
    if (gumboLibraryItemProvider != null) gumboLibraryItemProvider.dispose();
    if (gumboSubclauseItemProvider != null) gumboSubclauseItemProvider.dispose();
    if (specSectionItemProvider != null) specSectionItemProvider.dispose();
    if (computationalModelItemProvider != null) computationalModelItemProvider.dispose();
    if (flowsItemProvider != null) flowsItemProvider.dispose();
    if (flowItemProvider != null) flowItemProvider.dispose();
    if (contractItemProvider != null) contractItemProvider.dispose();
    if (specStatementItemProvider != null) specStatementItemProvider.dispose();
    if (exprItemProvider != null) exprItemProvider.dispose();
    if (subcomponentElementItemProvider != null) subcomponentElementItemProvider.dispose();
    if (featureElementItemProvider != null) featureElementItemProvider.dispose();
    if (periodicComputationalModelItemProvider != null) periodicComputationalModelItemProvider.dispose();
    if (hyperperiodComputationalModelItemProvider != null) hyperperiodComputationalModelItemProvider.dispose();
    if (assumeStatementItemProvider != null) assumeStatementItemProvider.dispose();
    if (guaranteeStatementItemProvider != null) guaranteeStatementItemProvider.dispose();
    if (binaryExprItemProvider != null) binaryExprItemProvider.dispose();
    if (unaryExprItemProvider != null) unaryExprItemProvider.dispose();
    if (idExprItemProvider != null) idExprItemProvider.dispose();
  }

}
