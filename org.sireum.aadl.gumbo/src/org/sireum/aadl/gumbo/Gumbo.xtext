grammar org.sireum.aadl.gumbo.Gumbo with org.osate.xtext.aadl2.properties.Properties

generate gumbo "http://www.sireum.org/aadl/gumbo/Gumbo"

import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


AnnexLibrary returns aadl2::AnnexLibrary:
	GumboLibrary
;

AnnexSubclause returns aadl2::AnnexSubclause:
	GumboSubclause
;

GumboLibrary returns GumboLibrary:
	{GumboLibrary}
	(functions = Functions)?
;

GumboSubclause returns GumboSubclause:
	{GumboSubclause}
//	specs+=SpecSection*
    specs=SpecSection
;

SpecSection: {SpecSection}
	(state = State)?
	(functions = Functions)?
	(invariants = Invariants)?
	(integration = Integration)?
	(initialize = Initialize)?
	(compute = Compute)?
;

State:
	'state' (decls += StateVarDecl)+
;

StateVarDecl:
 // ...plain declaration without cross referencing is given below	
 // id1 = ID ':' typeName = ID
 // ...single id per type
 (name = ID ':') typeName=[aadl2::DataSubcomponentType|QualifiedName] ';'
 // ...multiple ids per type -- leave this out for now until I figure out how to get cross-referencing right for an id list
 // ids+=ID (',' ids+=ID)* ':' typeName=[aadl2::DataSubcomponentType|QCREF] ';'
;

Invariants:
	'invariants' (specs+=InvSpec)+
;

InvSpec:
	'inv' id=ID descriptor=STRING_VALUE? ':' expr=OwnedExpression ';'
;

Integration:
	'integration' (specs+=SpecStatement)+
;

Initialize:
	{Initialize} 'initialize'
	  (modifies=SlangModifies ';')? 
	  (specs+=InitializeSpecStatement)*
	  (flows+=InfoFlowClause)*
;

InitializeSpecStatement:
  guaranteeStatement = GuaranteeStatement   	
;

Compute:
	{Compute} 'compute'
	  (modifies=SlangModifies ';')?

	  // allow the following to occur in any order?
	  // is ordering important?
	  // TODO: causes antlr to freeze
	  //( 
	  //	  (specs+=SpecStatement)* // assume and/or guarantees
	  //	| ('cases' (cases+=CaseStatementClause)+)*
	  //	| (handlers+=HandlerClause)*
	  //)+
	  
	  (specs+=SpecStatement)* // assume and/or guarantees
	  ('cases' (cases+=CaseStatementClause)+)*
	  (handlers+=HandlerClause)*
	  (flows+=InfoFlowClause)*
;

InfoFlowClause:
	'infoflow' id=ID descriptor=STRING_VALUE? ':'
		  'from' '(' (fromPortOrStateVar+=[ecore::EObject|ID] ( ',' fromPortOrStateVar+=[ecore::EObject|ID])* )? ')'
		  ','
		  'to' '(' (toPortOrStateVar+=[ecore::EObject|ID] ( ',' toPortOrStateVar+=[ecore::EObject|ID])* )? ')' ';'
;

HandlerClause:
	'handle' id=[aadl2::Port|ID] ':'
	(modifies=SlangModifies ';')?
	// belt: can hanlders have assume statements?
	(guarantees+=GuaranteeStatement)+
;

CaseStatementClause:
	'case' id=ID descriptor=STRING_VALUE? ':' 
	       // in case clauses, we must have both an assume clause and a guarantee clause
	       // but they don't have a display name (they will "inherit" the name from the case name).
	       assumeStatement = AnonAssumeStatement
	       guaranteeStatement = AnonGuaranteeStatement
;

SpecStatement:
    AssumeStatement
  | GuaranteeStatement  	
;


AssumeStatement: 
	'assume' id=ID descriptor=STRING_VALUE? ':' expr=OwnedExpression ';'
;

AnonAssumeStatement:  
	'assume' expr=OwnedExpression ';'
;

GuaranteeStatement: 
	'guarantee' id=ID descriptor=STRING_VALUE? ':' expr=OwnedExpression ';'
;

AnonGuaranteeStatement: 
	'guarantee' expr=OwnedExpression ';'
;

PREDICATE: // TODO 
	ID
;

OtherDataRef:
	(
		(
			namedElement=[aadl2::NamedElement|ID]
	 		(arrayRange+=ArrayRange)*
		) 
		('.' path=OtherDataRef)?
//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	)
;

DoubleDotRef:
	elm=[aadl2::NamedElement|QualifiedName]
;

DataElement returns DataElement:
	dataElement = [aadl2::DataSubcomponentType|QualifiedName]
;

SubcomponentElement returns SubcomponentElement:
	subcomponent = [aadl2::Subcomponent|ID]
;

Functions:
	'functions' (specs+=FuncSpec)+
;

FuncSpec: SlangDefDef ';';

SlangDefDeclDef: 'def' SlangDefMods? sde=SlangDefExt? name=SlangDefID typeParams=SlangTypeParams? params=SlangDefParams? ':' type=SlangType c=SlangDefContract? ( ':=' e=OwnedExpression )? ;

SlangDefDecl: 'def' SlangDefMods? sde=SlangDefExt? name=SlangDefID typeParams=SlangTypeParams? params=SlangDefParams? ':' type=SlangType c=SlangDefContract? ;
	
SlangDefDef: 
	 //defMods=SlangDefMods 
	 'def' sde=SlangDefExt? name=SlangDefID 
		typeParams=SlangTypeParams? params=SlangDefParams ':' type=SlangType // TODO: make parens optional if no params, requires codegen/sym-resolver modifications
		':=' methodContract=SlangDefContract body=OwnedExpression
;

//SlangDefMods: 'strict' | 'memoize' | 'mut' | 'spec' ;
SlangDefMods: '@strictpure' | '@pure';

SlangDefExt: '(' name=ID ':' typeName=SlangType ')' ;
	
SlangDefID: ID | Operator ;

SlangDefParams: '(' (params+=SlangDefParam ( ',' params+=SlangDefParam )* )? ')' ;
	
SlangDefParam: name=ID ':' (isMethodDef ?= '=>'?) typeName=SlangType (isVarArg ?= '*'?) ;


SlangTypeParams: '[' typeParam+=SlangTypeParam (  ',' typeParam+=SlangTypeParam )* ']' ;

SlangTypeParam: isMut ?= 'mut'? name=ID ;

SlangDefContract
	: {SlangDefContract}
	  ( 
	    ( reads=SlangReads ';' )? 
	    ( requires=SlangRequires ';' )?
	    ( modifies=SlangModifies ';' )? 
	    ( ensures=SlangEnsures ';' )?
	  )
	;

SlangDefContractCase: {SlangDefContractCase} 'case' /*SLANG_*/STRING_VALUE req=SlangRequires? ens=SlangEnsures? ;

SlangSuprs: '<:' superTypes+=SlangSupr ( ',' superTypes+=SlangSupr )* ;

SlangSupr: name=SlangName args=SlangTypeArgs? ;

SlangName: ID ( '.' ID )* ;

SlangExt: {SlangExt} 'extension' ID ( 'for' SlangName )?  '{' decl+=SlangDefDecl* '}' ;

SlangInvariant: 'invariant' exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )* ;

SlangRequires: 'assume' exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )*  ;

SlangReads: 'reads' exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )* ;

SlangModifies: 'modifies' exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )*  ;

SlangEnsures: 'guarantee'  exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )* ;

SlangStmt
	: {SlangVarDef} d=SlangVarDef
	| {SlangIfStmt} 'if' cond=OwnedExpression b=SlangBlock e=SlangElse?
	| {SlangWhileStmt} 'while' cond=OwnedExpression l=SlangLoopContract b=SlangBlock
//	| ({SlangForStmt} 'for' range+=SlangForRange ( ','  range+=SlangForRange )*) l=SlangLoopContract b=SlangBlock
	| {SlangMatchStmt} 'match' testExpr=OwnedExpression '{' c+=SlangCase* '}'
	| {SlangSpecStmt} 'spec' b=SlangBlock
	| {SlangAssumeStmt} 'assume' e=OwnedExpression /*SLANG_*/STRING_VALUE?
	| {SlangAssertStmt} 'assert' e=OwnedExpression /*SLANG_*/STRING_VALUE?
	| {SlangHaltStmt} 'halt' /*SLANG_*/STRING_VALUE?
	| {SlangDoStmt} 'do' e=OwnedExpression
	// FIXME: This causes a "multiple alternatives" warning.
	| {SlangIdStmt} portOrSubcomponentOrStateVar=[ecore::EObject|ID] 
	  ( ':'
	  | l+=SlangLHSSuffix* ( ( ':=' | DEFOP ) e=OwnedExpression )?
	  )
	;
	
SlangElse
	: 'else'
		( 'if' cond=OwnedExpression b=SlangBlock e=SlangElse?
		| SlangBlock
		)
	;
	
SlangLoopContract: {SlangLoopContract} inv=SlangInvariant? mod=SlangModifies? ;

SlangLHSSuffix
	: {SlangFieldLookup} '.' ID
	| {SlangMethodCall} '(' ( exprs+=OwnedExpression ( ',' exprs+=OwnedExpression )* )? ')'
	;

SlangCase: 'case' pattern=SlangPattern ( 'if' e=OwnedExpression )? '=>' s+=SlangStmt* ;

SlangPattern: {SlangPattern}
	  ID ( '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')' )?
	| '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')'
	;

SlangTPattern:
	  {SlangTPattern} ID ( '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')' | ':' type=SlangType )?
	| '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')'
	| {SlangTPattern} '_' ( ':' type=SlangType )?
	;
	
SlangTypedVarDef returns SlangVarDef:
	SlangVarMod SlangPattern ':' typeName=SlangType ':=' init=OwnedExpression
;

SlangVarDef: SlangVarMod SlangPattern ( ':' typeName=SlangType )? ':=' init=OwnedExpression ;

SlangVarDeclDef returns SlangVarDef:
	SlangVarMod 'spec'? name=ID ':' typeName=SlangType ( ':=' init=OwnedExpression )?
;

SlangVarMod: 'val' | 'var' ;

		
SlangType
	: SlangBaseType// ( '=>' SlangBaseType )*
	//| 'mut' SlangBaseType ( '=>' SlangBaseType )+
	;
	
SlangBaseType returns SlangType
	: typeName=[aadl2::DataSubcomponentType|QualifiedName]//ID SlangTypeArgs?
	//| '(' ( SlangType ( ',' SlangType )* )? ')'
	;

SlangTypeArgs: '[' types+=SlangType ( ',' types+=SlangType )* ']' ;


SlangBlock: {SlangBlock} '{' stmts+=SlangStmt* r=SlangRet? '}' ;




OwnedExpression
	: {BasicExp} terms+=SlangAccess 
	      ( ops+=Operator terms+=SlangAccess )*
	| {IfElseExp} 'if' '(' ifCond=OwnedExpression ')' thenExpr=OwnedExpression 'else' elseExpr=OwnedExpression 
	| {QuantifiedExp} ( '\\all' | '\\some' | '∀' | '∃' ) qVar+=SlangQuantVar ( ',' qVar+=SlangQuantVar )* '=>' quantifiedExpr=OwnedExpression
	| {UnaryExp} op=Operator accessExp=SlangAccess
	;
	
SlangQuantVar: ID ':' e=OwnedExpression ( ( '..' | '..<' ) upperBound=OwnedExpression )? ;

SlangAccess returns Expr
	: {SlangAccess} t=SlangTerm ( suffixes+=SlangAccessSuffix )* ;

SlangAccessSuffix: {SlangAccessSuffix} '.' id=ID; // cs=SlangCallSuffix? ;

SlangTerm returns Expr
	: {SlangLitTerm} lit=SlangLit
	| {SlangInterpTerm} i=SlangInterp
	| => ({InStateExpr} 'In' '(') stateVar=[StateVarDecl|ID] ')'
	| => ({MaySendExpr} 'MaySend' '(') eventPort=[aadl2::Port|ID] (',' value=OwnedExpression)? ')' 
	| => ({MustSendExpr} 'MustSend' '(') eventPort=[aadl2::Port|ID] (',' value=OwnedExpression)? ')'
	| => ({NoSendExpr} 'NoSend' '(') eventPort=[aadl2::Port|ID] ')'
	| => ({HasEventExpr} 'HasEvent' '(') eventPort=[aadl2::Port|ID] ')'
	| => ({CallExpr} id=[ecore::EObject|QualifiedName] callSuffix=SlangCallSuffix )
	| => ({EnumLitExpr} enumType=[aadl2::DataClassifier|QCLREF] '.') value=[aadl2::StringLiteral|ID]
	| => ({RecordLitExpr} recordType=DataElement '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=OwnedExpression (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=OwnedExpression)* '}'
	| {DataRefExpr} portOrSubcomponentOrStateVar=[ecore::EObject|ID] ('.' ref=OtherDataRef)?
	| {ParenExpr} '(' exp=OwnedExpression ')'
	//| {SlangTupleTerm} '(' e+=Expr ( ',' e+=Expr )*  ')'
	| {SlangForTerm} 'for' r+=SlangForRange ( ',' r+=SlangForRange )*  'yield' ( b=SlangBlock |  '(' e=OwnedExpression ')' )
	| {SlangBlockTerm} '{'
	   ( (p=SlangParams '=>')? e=OwnedExpression '}'
	    | stmt+=SlangStmt* r=SlangRet? '}'
	   )
	;


SlangParams: '(' params+=SlangParam ( ',' params+=SlangParam )? ')' ;
	
SlangParam: 'var'? name=ID ':' ( '=>' )? typeName=SlangType '*'? ;

SlangForRange: ID ':' e=OwnedExpression ( ( '..' |  '..<' ) upper=OwnedExpression ( 'by' step=OwnedExpression )? )? ;

SlangRet: {SlangRet} 'return' e=OwnedExpression? ;

SlangCallSuffix: {SlangCallSuffix}
  ca=SlangCallArgs
	//ta=SlangTypeArgs ca=SlangCallArgs // TODO: add back ? for call args when support for no param methods is added
	//| ca=SlangCallArgs
	;
	
//SlangCallArgs: {SlangCallArgs} '(' ( arg+=SlangIDExp ( ',' arg+=SlangIDExp )* )? ')' ;
SlangCallArgs: {SlangCallArgs} '(' ( arg+=OwnedExpression ( ',' arg+=OwnedExpression )* )? ')' ;
	
//SlangIDExp: e+=Expr ( ':=' e+=Expr )? ;


SlangLit 
	: {BooleanLit} value=('T' | 'F' | 'true' | 'false')
	| {ResultLit} 'res'
	| {IntegerLit} value=INTEGER_LIT
	//| {IntIdfLit} value=INT_IDF
	| {HexLit} value=HEX
	| {BinLit} value=BIN
	| {F32Lit} value=F32_LIT
	| {F64Lit} value=(F64_LIT | REAL_LIT)
	| {F32Obj} value='F32'
	| {F64Obj} value='F64'
	| {SlangStringLit} value=STRING_VALUE
	//| {RealIdfLit} value=REAL_IDF
	| {MStringLit} value=MSTRING
	;

SlangInterp	
	: {SlangMspInterp} msp=MSP
	| {SlangLiteralInterp} sli=SLI
	| {SlangMspbInterp} mspb=MSPB minterp=SlangMInterp
	;

SlangMInterp
	: '{' e=OwnedExpression '}' ( MSPM m=SlangMInterp | MSPE )
	;
	
QualifiedName
	: QCREF;
	
terminal STRING_VALUE: '"' ( ESC_SEQ | !( '\\' | '"' ) )* '"' ;

terminal MSTRING: '"""' ( !'"'|  '"' !'"' | '""' !'"' )* ( '"""' | '""""' | '"""""' ) ;

terminal MSP: IDF '"""' MSPI* ( '"""' | '""""' | '"""""' ) ;

terminal SLI: IDF '"' ( ESC_SEQ | !( '\\' | '"' ) )* '"' ;

terminal MSPB: IDF '"""' MSPI* '$' ;

terminal MSPM: '$' MSPI* '$' ;

terminal MSPE: '$' MSPI* ( '"""' | '""""' | '"""""' ) ;

terminal DEFOP: ':' OPSYM* '=' ;


terminal IMPLIES: ('-' | '~') '>' ':';

// can't use -->: as -- is a comment in AADL
terminal SIMPLIES: '~' '~'  '>' ':'; // short circuit implies

Operator: OP | PlusMinus | STAR | IMPLIES | SIMPLIES;

terminal OP: ( OPSYM+ | '\\' IDF ) ;
//
//terminal INT
//	: '0' IDF?
//	| '1'..'9' DIGIT* IDF_NOU?
//	;
//	
terminal HEX: '0x' EXTENDED_DIGIT+ ( '.' IDF )? ;

terminal BIN: '0b' ( '0' | '1' | '_' )+ ( '.' IDF )? ;

//terminal REAL
//	: DIGIT+ '.' DIGIT+ EXPONENT? REALIDF?
//	| '.' DIGIT+ EXPONENT? REALIDF?
//	| DIGIT+ EXPONENT REALIDF?
//	;

//terminal CHAR: '\'' ( ESC_SEQ | !('\''|'\\') ) '\'' ;

terminal INT_IDF: INTEGER_LIT IDF;

terminal F32_LIT: REAL_LIT 'f';

terminal F64_LIT: REAL_LIT 'd';

terminal fragment IDF: ( LETTER | '_' ) ( LETTER | DIGIT )* ;

//terminal fragment IDF_NOU: LETTER ( LETTER | DIGIT )* ;
//
//terminal fragment REALIDF: LETTER_NOE ( LETTER | DIGIT )* ;
//
terminal fragment MSPI: !( '"' | '$' ) | '$$' | '"' !'"' | '""' !'"' ;

terminal fragment LETTER: 'a'..'z' | 'A'..'Z';

//terminal fragment LETTER_NOE: 'a'..'d' | 'f'..'z' | 'A'..'D' | 'F'..'Z' ;

terminal fragment OPSYM
	: //'+' | '-' | '*' |
	 '/' | '%' | '=' | '<' | '>' | '!' | '&' | '^' | '|' | '~'
	| ( '\u2200' .. '\u22FF' ) // https://en.wikipedia.org/wiki/Mathematical_Operators
	| ( '\u2A00' .. '\u2AFF' ) // https://en.wikipedia.org/wiki/Supplemental_Mathematical_Operators
	| ( '\u27C0' .. '\u27EF' ) // https://en.wikipedia.org/wiki/Miscellaneous_Mathematical_Symbols-A
	| ( '\u2980' .. '\u29FF' ) // https://en.wikipedia.org/wiki/Miscellaneous_Mathematical_Symbols-B
	;
	
terminal fragment ESC_SEQ: '\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\' ) | UNICODE_ESC ;
	
terminal fragment UNICODE_ESC: '\\' 'u' EXTENDED_DIGIT EXTENDED_DIGIT EXTENDED_DIGIT EXTENDED_DIGIT ;
