grammar org.sireum.aadl.gumbo.Gumbo with org.osate.xtext.aadl2.properties.Properties

generate gumbo "http://www.sireum.org/aadl/gumbo/Gumbo"

import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


AnnexLibrary returns aadl2::AnnexLibrary:
	GumboLibrary
;

AnnexSubclause returns aadl2::AnnexSubclause:
	GumboSubclause
;

GumboLibrary returns GumboLibrary:
	{GumboLibrary}
	'library' 'for' 'gumbo'
;

GumboSubclause returns GumboSubclause:
	{GumboSubclause}
//	specs+=SpecSection*
    specs=SpecSection
;

SpecSection: {SpecSection}
	(state = State)?
	(functions = Functions)?
	(invariants = Invariants)?
	(integration = Integration)?
	(initialize = Initialize)?
	(compute = Compute)?
;

State:
	'state' (decls += StateVarDecl)+
;

StateVarDecl:
 // ...plain declaration without cross referencing is given below	
 // id1 = ID ':' typeName = ID
 // ...single id per type
 (name = ID ':') typeName=[aadl2::DataSubcomponentType|QCREF] ';'
 // ...multiple ids per type -- leave this out for now until I figure out how to get cross-referencing right for an id list
 // ids+=ID (',' ids+=ID)* ':' typeName=[aadl2::DataSubcomponentType|QCREF] ';'
;

Invariants:
	'invariants' (specs+=InvSpec)+
;

InvSpec:
	'inv' displayName=SLANG_STRING ':' expr=Expr ';'
;

Integration:
	'integration' (specs+=SpecStatement)+
;

Initialize:
	'initialize' (specs+=InitializeSpecStatement)+
;

InitializeSpecStatement:
  GuaranteeStatement   	
;

Compute:
	'compute' 
	  // for now, just set the grammar to have a collection of case statements.  
	  // Eventually allow arbitrary assume/guarantees around an aggregated case statement
	   (cases+=CaseStatementClause)+
;

CaseStatementClause:
	'case' displayName=SLANG_STRING ':' 
	       // in case clauses, we must have both an assume clause and a guarantee clause
	       // but they don't have a display name (they will "inherit" the name from the case name).
	       assumeStatement = AnonAssumeStatement
	       guaranteeStatement = AnonGuaranteeStatement
;

SpecStatement:
    AssumeStatement
  | GuaranteeStatement   	
;


AssumeStatement: 
	'assume' displayName=SLANG_STRING ':' expr=Expr ';'
;

AnonAssumeStatement:  
	'assume' expr=Expr ';'
;

GuaranteeStatement: 
	'guarantee' displayName=SLANG_STRING ':' expr=Expr ';'
;

AnonGuaranteeStatement: 
	'guarantee' expr=Expr ';'
;

PREDICATE: // TODO 
	ID
;

OtherDataRef:
	(
		(
			namedElement=[aadl2::NamedElement|ID]
	 		(arrayRange+=ArrayRange)*
		) 
		('.' path=OtherDataRef)?
//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	)
;

DoubleDotRef:
	elm=[aadl2::NamedElement|QCREF]
;

DataElement returns DataElement:
	dataElement = [aadl2::DataSubcomponentType|QCREF]
;

SubcomponentElement returns SubcomponentElement:
	subcomponent = [aadl2::Subcomponent|ID]
;

Functions:
	'functions' (specs+=FuncSpec)+
;

FuncSpec: SlangDefDef ';';

SlangDefDeclDef: 'def' SlangDefMods? sde=SlangDefExt? name=SlangDefID typeParams=SlangTypeParams? params=SlangDefParams? ':' type=SlangType c=SlangDefContract? ( ':=' e=Expr )? ;

SlangDefDecl: 'def' SlangDefMods? sde=SlangDefExt? name=SlangDefID typeParams=SlangTypeParams? params=SlangDefParams? ':' type=SlangType c=SlangDefContract? ;
	
SlangDefDef: 'def' SlangDefMods? sde=SlangDefExt? name=SlangDefID typeParams=SlangTypeParams? params=SlangDefParams? ':' type=SlangType c=SlangDefContract? ':=' e=Expr ;

SlangDefMods: 'strict' | 'memoize' | 'mut' | 'spec' ;

SlangDefExt: '(' name=ID ':' typeName=SlangType ')' ;
	
SlangDefID: ID | Operator ;

SlangDefParams: '(' params+=SlangDefParam ( ',' params+=SlangDefParam )? ')' ;
	
SlangDefParam: name=ID ':' ( '=>' )? typeName=SlangType '*'? ;


SlangTypeParams: '[' SlangTypeParam (  ',' SlangTypeParam )* ']' ;

SlangTypeParam: 'mut'? ID ;

SlangDefContract
	: {SlangDefContract} 'spec'
	  ( rea=SlangReads? req=SlangRequires? mod=SlangModifies? ens=SlangEnsures?
	  | contracts+=SlangDefContractCase+ rea=SlangReads? mod=SlangModifies?
	  )
	;

SlangDefContractCase: {SlangDefContractCase} 'case' /*SLANG_*/SLANG_STRING req=SlangRequires? ens=SlangEnsures? ;

SlangSuprs: '<:' superTypes+=SlangSupr ( ',' superTypes+=SlangSupr )* ;

SlangSupr: name=SlangName args=SlangTypeArgs? ;

SlangName: ID ( '.' ID )* ;

SlangExt: {SlangExt} 'extension' ID ( 'for' SlangName )?  '{' decl+=SlangDefDecl* '}' ;

SlangInvariant: 'invariant' exprs+=Expr ( ',' exprs+=Expr )* ;

SlangReads: 'reads' exprs+=Expr ( ',' exprs+=Expr )* ;

SlangRequires: 'requires' exprs+=Expr ( ',' exprs+=Expr )* ;

SlangModifies: 'modifies' exprs+=Expr ( ',' exprs+=Expr )* ;

SlangEnsures: 'ensures' exprs+=Expr ( ',' exprs+=Expr )* ;

SlangStmt
	: {SlangVarDef} d=SlangVarDef
	| {SlangIfStmt} 'if' cond=Expr b=SlangBlock e=SlangElse?
	| {SlangWhileStmt} 'while' cond=Expr l=SlangLoopContract b=SlangBlock
//	| ({SlangForStmt} 'for' range+=SlangForRange ( ','  range+=SlangForRange )*) l=SlangLoopContract b=SlangBlock
	| {SlangMatchStmt} 'match' testExpr=Expr '{' c+=SlangCase* '}'
	| {SlangSpecStmt} 'spec' b=SlangBlock
	| {SlangAssumeStmt} 'assume' e=Expr /*SLANG_*/SLANG_STRING?
	| {SlangAssertStmt} 'assert' e=Expr /*SLANG_*/SLANG_STRING?
	| {SlangHaltStmt} 'halt' /*SLANG_*/SLANG_STRING?
	| {SlangDoStmt} 'do' e=Expr
	// FIXME: This causes a "multiple alternatives" warning.
	| {SlangIdStmt} portOrSubcomponentOrStateVar=[ecore::EObject|ID] 
	  ( ':'
	  | /*l+=SlangLHSSuffix**/ ( ( ':=' | DEFOP ) e=Expr )?
	  )
	;
	
SlangElse
	: 'else'
		( 'if' cond=Expr b=SlangBlock e=SlangElse?
		| SlangBlock
		)
	;
	
SlangLoopContract: {SlangLoopContract} inv=SlangInvariant? mod=SlangModifies? ;

SlangLHSSuffix
	: {SlangFieldLookup} '.' ID
	| {SlangMethodCall} '(' ( exprs+=Expr ( ',' exprs+=Expr )* )? ')'
	;

SlangCase: 'case' pattern=SlangPattern ( 'if' e=Expr )? '=>' s+=SlangStmt* ;

SlangPattern: {SlangPattern}
	  ID ( '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')' )?
	| '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')'
	;

SlangTPattern:
	  {SlangTPattern} ID ( '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')' | ':' type=SlangType )?
	| '(' patterns+=SlangTPattern ( ',' patterns+=SlangTPattern )* ')'
	| {SlangTPattern} '_' ( ':' type=SlangType )?
	;
	
SlangTypedVarDef returns SlangVarDef:
	SlangVarMod SlangPattern ':' typeName=SlangType ':=' init=Expr
;

SlangVarDef: SlangVarMod SlangPattern ( ':' typeName=SlangType )? ':=' init=Expr ;

SlangVarDeclDef returns SlangVarDef:
	SlangVarMod 'spec'? name=ID ':' typeName=SlangType ( ':=' init=Expr )?
;

SlangVarMod: 'val' | 'var' ;

Expr
	: term+=SlangAccess ( 
	  ( Operator term+=SlangAccess )* 
	  | '?' thenExpr=Expr ':' elseExpr=Expr
	  )
	| ( '\\all' | '\\some' | '∀' | '∃' ) qVar+=SlangQuantVar ( ',' qVar+=SlangQuantVar )* '=>' quantifiedExpr=Expr
	| Operator SlangAccess
	;
	
SlangQuantVar: ID ':' e=Expr ( ( '..' | '..<' ) upperBound=Expr )? ;

SlangBlock: {SlangBlock} '{' stmts+=SlangStmt* r=SlangRet? '}' ;
	
SlangAccess returns Expr: t=SlangTerm ;//suf+=SlangAccessSuffix* ;

//SlangAccessSuffix: {SlangAccessSuffix} '.' ID cs=SlangCallSuffix? ;

SlangTerm returns Expr
	: {SlangLitTerm} SlangLit
	| {SlangInterpTerm} i=SlangInterp
	| => ({EnumLitExpr} 'enum' '(') enumType=DataElement ',' value=[aadl2::StringLiteral|ID] ')'
	| => ({RecordLitExpr} recordType=DataElement '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=Expr)* '}'
	| {DataRefExpr} portOrSubcomponentOrStateVar=[ecore::EObject|ID] ('.' ref=OtherDataRef)? cs=SlangCallSuffix?
	| {SlangTupleTerm} '(' e+=Expr ( ',' e+=Expr )*  ')'
	| {SlangForTerm} 'for' r+=SlangForRange ( ',' r+=SlangForRange )*  'yield' ( b=SlangBlock |  '(' e=Expr ')' )
	| {SlangBlockTerm} '{'
	   ( (p=SlangParams '=>')? e=Expr '}'
	    | stmt+=SlangStmt* r=SlangRet? '}'
	   )
	;


SlangParams: '(' params+=SlangParam ( ',' params+=SlangParam )? ')' ;
	
SlangParam: 'var'? name=ID ':' ( '=>' )? typeName=SlangType '*'? ;

SlangForRange: ID ':' e=Expr ( ( '..' |  '..<' ) upper=Expr ( 'by' step=Expr )? )? ;

SlangRet: {SlangRet} 'return' e=Expr? ;

SlangCallSuffix: {SlangCallSuffix}
	ta=SlangTypeArgs ca=SlangCallArgs?
	| ca=SlangCallArgs
	;
	
SlangCallArgs: {SlangCallArgs} '(' ( arg+=SlangIDExp ( ',' arg+=SlangIDExp )* )? ')' ;
	
SlangIDExp: e+=Expr ( ':=' e+=Expr )? ;
		
SlangType
	: SlangBaseType// ( '=>' SlangBaseType )*
	//| 'mut' SlangBaseType ( '=>' SlangBaseType )+
	;
	
SlangBaseType returns SlangType
	: typeName=[aadl2::DataSubcomponentType|QCREF]//ID SlangTypeArgs?
	//| '(' ( SlangType ( ',' SlangType )* )? ')'
	;

SlangTypeArgs: '[' types+=SlangType ( ',' types+=SlangType )* ']' ;

SlangLit
	: 'true'
	| 'false'
	| INTEGER_LIT
	| INT_IDF
	| HEX
	| BIN
	| REAL_LIT
	| SLANG_STRING
	| REAL_IDF
	| MSTRING
	;

SlangInterp	: {SlangInterp}
	  MSP
	| MSPB SlangMInterp
	;

SlangMInterp
	: '{' Expr '}' ( MSPM m=SlangMInterp | MSPE )
	;
	
terminal SLANG_STRING: '"' ( ESC_SEQ | !( '\\' | '"' ) )* '"' ;

terminal MSTRING: '"""' ( !'"'|  '"' !'"' | '""' !'"' )* ( '"""' | '""""' | '"""""' ) ;

terminal MSP: IDF '"""' MSPI* ( '"""' | '""""' | '"""""' ) ;

terminal MSPB: IDF '"""' MSPI* '$' ;

terminal MSPM: '$' MSPI* '$' ;

terminal MSPE: '$' MSPI* ( '"""' | '""""' | '"""""' ) ;

terminal DEFOP: ':' OPSYM* '=' ;
//

Operator: OP | PlusMinus | STAR;

terminal OP: ( OPSYM+ | '\\' IDF ) ;
//
//terminal INT
//	: '0' IDF?
//	| '1'..'9' DIGIT* IDF_NOU?
//	;
//	
terminal HEX: '0x' EXTENDED_DIGIT+ ( '.' IDF )? ;

terminal BIN: '0b' ( '0' | '1' | '_' )+ ( '.' IDF )? ;

//terminal REAL
//	: DIGIT+ '.' DIGIT+ EXPONENT? REALIDF?
//	| '.' DIGIT+ EXPONENT? REALIDF?
//	| DIGIT+ EXPONENT REALIDF?
//	;

//terminal CHAR: '\'' ( ESC_SEQ | !('\''|'\\') ) '\'' ;

terminal INT_IDF: INTEGER_LIT IDF;

terminal REAL_IDF: REAL_LIT IDF;

terminal fragment IDF: ( LETTER | '_' ) ( LETTER | DIGIT )* ;

//terminal fragment IDF_NOU: LETTER ( LETTER | DIGIT )* ;
//
//terminal fragment REALIDF: LETTER_NOE ( LETTER | DIGIT )* ;
//
terminal fragment MSPI: !( '"' | '$' ) | '$$' | '"' !'"' | '""' !'"' ;

terminal fragment LETTER: 'a'..'z' | 'A'..'Z';

//terminal fragment LETTER_NOE: 'a'..'d' | 'f'..'z' | 'A'..'D' | 'F'..'Z' ;

terminal fragment OPSYM
	: //'+' | '-' | '*' |
	 '/' | '%' | '=' | '<' | '>' | '!' | '&' | '^' | '|' | '~'
	| ( '\u2200' .. '\u22FF' ) // https://en.wikipedia.org/wiki/Mathematical_Operators
	| ( '\u2A00' .. '\u2AFF' ) // https://en.wikipedia.org/wiki/Supplemental_Mathematical_Operators
	| ( '\u27C0' .. '\u27EF' ) // https://en.wikipedia.org/wiki/Miscellaneous_Mathematical_Symbols-A
	| ( '\u2980' .. '\u29FF' ) // https://en.wikipedia.org/wiki/Miscellaneous_Mathematical_Symbols-B
	;
	
terminal fragment ESC_SEQ: '\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\' ) | UNICODE_ESC ;
	
terminal fragment UNICODE_ESC: '\\' 'u' EXTENDED_DIGIT EXTENDED_DIGIT EXTENDED_DIGIT EXTENDED_DIGIT ;
