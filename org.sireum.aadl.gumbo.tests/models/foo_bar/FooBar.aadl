package FooBar
public
	
	with Data_Model, Base_Types;
	
	data ABCD
	    properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Integer", "Float");
		
	end ABCD;
	
	data implementation ABCD.EFG
	end ABCD.EFG;

	data SetPoint
  	-- Indicate that the set point info will be a struct (record)
    -- For structs, use of the type must refer to the data component implementation (SetPoint.i),
    --  which defines the fields and associated types of the struct.
      properties
        Data_Model::Data_Representation => Struct;
    end SetPoint;

    data implementation SetPoint.i
      subcomponents
        low: data Base_Types::Integer;
        high: data Base_Types::Integer;
	      annex gumbo {**       
	      invariants
	        inv SDI "SetPoint Data Invariant": low <= high;
	      **};
    end SetPoint.i;
    
    data SetPointEnclosure
    end SetPointEnclosure;
    
    data implementation SetPointEnclosure.i
    	subcomponents
    		sp : data SetPoint.i;
    end SetPointEnclosure.i;
  
	thread C1
	  features
	    -- ==== INPUTS ====	
	    inC1: in data port SetPoint.i;
	    inS1: in data port SetPointEnclosure.i; 
	    -- ==== OUTPUTS ====	
	    outC1: out data port SetPoint.i;
	  annex gumbo {** 
	   	state 
	   	   myInt1: Base_Types::Integer;
	   	   myInt2: Base_Types::Integer;
	   	   myInt3: Base_Types::Integer;
	   	   myFloat1: Base_Types::Float;
	   	   myFloat2: Base_Types::Float;
	   	   myFloat3: Base_Types::Float;
	   	   
	   	   myRec1: SetPoint;
	   	 invariants
	   	   inv INV1 "inv1 title": myInt1 > myInt2;
	   	   inv INV2 "inv2 title": myInt3 = 1;
	   	integration
--	   	   test comment
	   	   assume ASS1 "integration assume": myInt1 > inS1.sp.low;
	   	   assume ASS2 "test floor()": floor(myFloat1) < inC1.high;
	   	   assume ASS3 "test floor() and +": (floor(myFloat2 + 3.0) = inC1.high) <=> false; 
	   	   assume ASS4 "test real() and ^": real(inC1.low) ^ 2.0 > myFloat3;
	   	   assume ASS5 "test enum literal": myFloat1 = enum(ABCD, Integer);
	   	   assume ASS6 "test record literal": inS1.sp <> SetPoint.i { low = 1; high = 2 }; 
	   	   guarantee GUAR1 "guarantee title": outC1;
	   	initialize
	   	   guarantee GUAR2 "guarantee title": outC1 = 1;
	   	compute
	   	   cases
	   	   case C1 "case1 title": 
	   	     assume inC1 = 100;
	   	     guarantee outC1.low = 3 and outC1.high = 10;
	   	   case C2 "case2 title": 
	   	     assume inC1 <> 100;
	   	     guarantee outC1.low = 4 and outC1.high = 20;
      **};
	end C1;
	
	thread implementation C1.i
	end C1.i;

    thread C2
    	
      features
        -- ==== INPUTS ==== 
        inC2: in data port SetPoint.i; 
        -- ==== OUTPUTS ====  
        outC2: out data port SetPoint.i;
      annex gumbo {**
        compute
          case "case1 title": 
	   	    assume inC2 > 5;
	   	    guarantee outC2.low = 1 and outC2.high = 1;
	      case "case2 title": 
	        assume inC2 <= 5;
	        guarantee outC2.low = 2 and outC2.high = 2;
      **};
    end C2;
  
    thread implementation C2.i
    end C2.i;

    process ProdCons
      features
        none;
      flows
        none;
      properties
        none;
    end ProdCons;

   process implementation ProdCons.i
      subcomponents
         c1: thread C1;
         c2: thread C2;
      connections
         conn1: port c1.outC1 -> c2.inC2;
   end ProdCons.i;	
	
end FooBar;